#!/usr/bin/env python

import sys
import pygtk; pygtk.require('2.0')
import gtk
import pango
import gobject
import subprocess
import re
import os
import signal
import datetime
import json


class DragonsTaleMonitor:
    def delete_event(self, widget, event, data=None):
        # return FALSE deletes, return TRUE cancels
        return False


    def destroy(self, widget, data=None):
        os.killpg(self.proc.pid, signal.SIGTERM)
        gtk.main_quit()

    def set_pmn(self,widget,data=None): 
        self.pmn=("OFF","ON")[widget.get_active()]

    def set_follow(self,widget,data=None): 
        self.follow=("OFF","ON")[widget.get_active()]

    def parse_chatline(self, line):
        (gendname,msg) = line.split('')[1:]
        return gendname, msg[1:]

    def color_print_name(self,buf,gendname):
        (gend,name) = gendname.split(':') 
        tags = []
        if gend=="F":
            tags.append("red_fg")
        else: tags.append("blue_fg")
        if name == self.playername:
          tags.append("playername")

        itr = buf.get_end_iter()
        start_offset = itr.get_offset()
        buf.insert(itr, name)

        for t in tags:
            start_itr = buf.get_iter_at_offset(start_offset)
            end_itr = buf.get_end_iter()
            buf.apply_tag_by_name(t,start_itr,end_itr)

    def next_name_or_game(self,msg):
        idxs = {}
        if msg.find(r'') > -1:
            idxs["name"] = msg.find(r'') 
        if msg.find(r'') > -1:
            idxs["game"] = msg.find(r'')
        return min(idxs, key=idxs.get)

    def print_with_colors(self,buf,msg):
        symbs = [ r'', r'' ]
        while len(msg)>0:
            if any(symb in msg for symb in symbs):
                first = self.next_name_or_game(msg)
                if first=="name":
                    name_st = msg.find(r'')
                    itr = buf.get_end_iter()
                    buf.insert(itr,msg[0:name_st])
                    msg = msg[name_st+1:] 
                    name_end = msg.find(r'')
                    self.color_print_name(buf,msg[0:name_end])
                    msg = msg[name_end+1:] 
                else:
                    game_st = msg.find(r'')
                    if game_st > -1:
                        itr = buf.get_end_iter()
                        buf.insert(itr,msg[0:game_st])
                        msg = msg[game_st+1:] 
                        game_end = msg.find(r'')
                        itr = buf.get_end_iter()
                        g_name = msg[0:game_end]
                        if g_name in self.games.keys():
                            g_name = self.games[g_name]['fn']
                        buf.insert_with_tags_by_name(itr, g_name, "green_fg")
                        msg = msg[game_end+1:] 
            else: 
                itr = buf.get_end_iter()
                buf.insert(itr,msg+"\n") 
                msg = ''
        

    def update(self,fd,condition):
        '''Figure out the info type and send it to the appropriate tab'''
        CHAT_RE = re.compile('ChatLog: ')
        PM_RE   = re.compile('ChatLog: PM(<-|->)')
        MSG_RE  = re.compile('ChatLog: Message:(.*)$')
        JP_RE   = re.compile('ChatLog: Jackpot:(.*)$')
        if condition == gobject.IO_IN:
            # need to reencode as utf-8
            line = fd.readline().decode('iso-8859-1').encode('utf8')

            m = CHAT_RE.match(line) 
            tab = None
            arrow = ''; msg = ''
            if m:
                tab = "Chat"
            else:
                m = PM_RE.match(line)
                if m:
                    tab = "PMs"
                    arrow = m.group(1)
                else:
                    m = MSG_RE.match(line)
                    if m: 
                        tab = "Messages" 
                        msg = m.group(1)
                    else:
                        m = JP_RE.match(line)
                        if m:
                            tab = "Jackpots"
                            msg = m.group(1)


            # tab, is which filter it matched, ie which tab to print to
            if not tab == None:
                t = str(datetime.datetime.now()).split('.')[0]
                buf = self.tvs[tab].get_buffer()
                itr = buf.get_end_iter()
                buf.insert_with_tags_by_name(itr,"["+t+"] ","small")
                itr = buf.get_end_iter()
                buf.insert(itr,arrow)
                
                if not tab in [ "Messages", "Jackpots" ]:
                    (gendname,msg) = self.parse_chatline(line)
                    self.color_print_name(buf,gendname)
                    itr = buf.get_end_iter()
                    buf.insert(itr,": "+msg)
                else:
                    itr = buf.get_end_iter()
                    buf.insert(itr,": ")
                    # these guys have names and games in the content
                    self.print_with_colors(buf,msg)


                if self.follow == "ON":
                    self.tvs[tab].scroll_to_mark(buf.get_insert(), 0)
                if self.pmn == "ON" and arrow == "<-":
                    gtk.gdk.beep() 

            return True 

        else:
            return False

    def monitor(self):
        '''Starts the subprocess that watches the log file and sends data
        to update when appropriate'''
        cmd = "tail -f "+self.lf
        # watch the logfile and add handler
        self.proc = subprocess.Popen(cmd, shell=True,
                                     stdout=subprocess.PIPE,
                                     preexec_fn=os.setsid)
        gobject.io_add_watch(self.proc.stdout, gobject.IO_IN, self.update)

    def hyperlink_handler(self, tag, tv, event, click_itr):
        if event.type == gtk.gdk.BUTTON_RELEASE:
            char_index = click_itr.get_offset()
            tag_name = tag.get_property("name")

    def get_playername(self):
        '''search the logfile for the playername'''
        lf = open(self.lf)
        NAME_RE = re.compile('Player Identification: (.*)$')
        while True:
          l = lf.readline()
          if not l: break
          m = NAME_RE.match(l) 
          if m:
            return m.group(1)

    def __init__(self, logfile=None):

        
        self.config = { 'pm_notify':None,
                        'autoscroll':None }
        # see if there's a config file in the userdir
        try:
            home = os.getenv("HOME")
            config_file = open(home+"/.dtmrc")
            for l in config_file.readlines():
                (option,value) = l.strip().split('=')
                if option in self.config.keys():
                    if value in ["ON","OFF"]:
                        self.config[option]=value
        except:
            pass

        # read in the games json file
        try:
            game_d = open('games.json')
            self.games = json.load(game_d)
        except:
            sys.stderr.write("Warning:  no games.json db file found, "+\
                             "some messages may not look so pretty.\n")
            self.games = {}


        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_default_size(480,640)

        
        # window title
        self.window.set_title("Dragon's Tale Monitor")        

        # connect window manager event to signal handlers
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)

        # set window border width
        self.window.set_border_width(0)

        box = gtk.VBox(False, 0) 
        self.window.add(box)

        self.notebook = gtk.Notebook()
        self.notebook.set_tab_pos(gtk.POS_TOP)
        box.pack_start(self.notebook)
        self.show_tabs = True 
        self.show_border = True

        # create tabs for "chat, pms"
        tab_names = ["Chat","PMs","Messages","Jackpots" ]
        self.tabs = {} 
        self.tvs  = {}
        for k in tab_names:
            bufferl = k 

            # scrolling area
            self.tabs[k] = gtk.ScrolledWindow()
            self.tabs[k].set_border_width(10)
            self.tabs[k].set_policy(gtk.POLICY_AUTOMATIC,
                                         gtk.POLICY_AUTOMATIC)
            self.tabs[k].show()

            label = gtk.Label(bufferl)
            self.notebook.append_page(self.tabs[k], label)

            # create a text view to hold the info 
            self.tvs[k] = gtk.TextView(buffer=None)
            self.tvs[k].set_editable(False)
            self.tvs[k].set_cursor_visible(False)
            self.tvs[k].set_wrap_mode(gtk.WRAP_WORD)
            self.tvs[k].set_justification(gtk.JUSTIFY_LEFT)
            self.tvs[k].show()

            # create some color tags
            tb = self.tvs[k].get_buffer()
            tag = tb.create_tag("red_fg", foreground="red")
            tag = tb.create_tag("blue_fg", foreground="blue")
            tag = tb.create_tag("green_fg", foreground="#008000")
            tag = tb.create_tag("playername", weight=pango.WEIGHT_BOLD)
            tag = tb.create_tag("link", foreground="blue", 
                                        underline=pango.UNDERLINE_SINGLE)
            tag.connect('event', self.hyperlink_handler)
            tag = tb.create_tag("small", scale=pango.SCALE_X_SMALL)

            self.tabs[k].add(self.tvs[k])

        

        # create a config option or two

        pmn_button = gtk.CheckButton('_PM notify')
        pmn_button.connect("toggled", self.set_pmn)

        if self.config['pm_notify'] == 'ON':
            pmn_button.set_active(True)
        pmn_button.show()

        follow_button = gtk.CheckButton('_Auto-scroll window as chats arrive')
        follow_button.connect("toggled", self.set_follow)
        if self.config['autoscroll'] == 'ON':
            follow_button.set_active(True)
        follow_button.show()

        box.pack_start(pmn_button,expand=False,padding=2)
        box.pack_start(follow_button,expand=False,padding=2)

        # display everything 
        #self.tv.show()
        #self.sw.show()
        box.show()
        self.notebook.show()
        self.window.show()

        # make logfile available
        if  logfile != None:
            self.lf = logfile
        else:
        # or request it
            d = gtk.FileChooserDialog(title="Select egenesis.bug file",
                                      action=gtk.FILE_CHOOSER_ACTION_OPEN,
                                      parent=self.window,
                                      buttons=(gtk.STOCK_OPEN,
                                               gtk.RESPONSE_OK))
            r = d.run()
            if not r == gtk.RESPONSE_OK:
                sys.stderr.write("No egenesis.bug file selected")
                sys.exit(1)
            else:
                self.lf = d.get_filename()
                d.destroy()



        # try to determine the player's own name
        self.playername = self.get_playername()
        if not self.playername:
            sys.stderr.write("Warning: difficulty determining player name.\n")




    def main(self):
        # all PyGTK applications require a gtk.main()
        self.monitor()
        gtk.main()


## If run directly...
if __name__ == "__main__":
    lf = None 
    if len(sys.argv)==2:
        lf = sys.argv[1]
    dtm = DragonsTaleMonitor(logfile=lf)
    dtm.main()
