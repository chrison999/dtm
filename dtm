#!/usr/bin/env python

import sys
import pygtk; pygtk.require('2.0')
import gtk
import pango
import gobject
import subprocess
import re
import os
import signal
import datetime

class DragonsTaleMonitor:
    def delete_event(self, widget, event, data=None):
        # return FALSE deletes, return TRUE cancels
        return False


    def destroy(self, widget, data=None):
        os.killpg(self.proc.pid, signal.SIGTERM)
        gtk.main_quit()

    def set_pmn(self,widget,data=None): 
        self.pmn=("OFF","ON")[widget.get_active()]

    def parse_chatline(self, line):
        (gendname,msg) = line.split('')[1:]
        return gendname, msg[1:]

    def color_print_name(self,buf,gendname):
        itr = buf.get_end_iter()
        (gend,name) = gendname.split(':') 
        if gend=="F":
            buf.insert_with_tags_by_name(itr,name,"red_fg")
        else:
            buf.insert_with_tags_by_name(itr,name,"blue_fg")

    def print_with_colors(self,buf,msg):
        symbs = [ r'', r'' ]
        while len(msg)>0:
            if any(symb in msg for symb in symbs):
                name_st = msg.find(r'')
                if name_st > -1:
                    buf.insert_at_cursor(msg[0:name_st])
                    msg = msg[name_st+1:] 
                    name_end = msg.find(r'')
                    self.color_print_name(buf,msg[0:name_end])
                    msg = msg[name_end+1:] 
                else:
                    game_st = msg.find(r'')
                    if game_st > -1:
                        buf.insert_at_cursor(msg[0:game_st])
                        msg = msg[game_st+1:] 
                        game_end = msg.find(r'')
                        itr = buf.get_end_iter()
                        buf.insert_with_tags_by_name(itr, msg[0:game_end],
                                                     "green_fg")
                        msg = msg[game_end+1:] 
            else: 
                buf.insert_at_cursor(msg+"\n") 
                msg = ''
        

    def update(self,fd,condition):
        '''Figure out the info type and send it to the appropriate tab'''
        CHAT_RE = re.compile('ChatLog: ')
        PM_RE   = re.compile('ChatLog: PM(<-|->)')
        MSG_RE  = re.compile('ChatLog: Message:(.*)$')
        JP_RE  = re.compile('ChatLog: Jackpot:(.*)$')
        if condition == gobject.IO_IN:
            # need to reencode as utf-8
            line = fd.readline().decode('iso-8859-1').encode('utf8')

            m = CHAT_RE.match(line) 
            tab = None
            arrow = ''; msg = ''
            if m:
                tab = "Chat"
            else:
                m = PM_RE.match(line)
                if m:
                    tab = "PMs"
                    arrow = m.group(1)
                else:
                    m = MSG_RE.match(line)
                    if m: 
                        tab = "Messages" 
                        msg = m.group(1)
                    else:
                        m = JP_RE.match(line)
                        if m:
                            tab = "Jackpots"
                            msg = m.group(1)


            if not tab == None:
                t = str(datetime.datetime.now()).split('.')[0]
                buf = self.tvs[tab].get_buffer()
                itr = buf.get_end_iter()
                buf.insert_with_tags_by_name(itr,"["+t+"] "+arrow,"small")
                
                if not tab in [ "Messages", "Jackpots" ]:
                    (gendname,msg) = self.parse_chatline(line)
                    self.color_print_name(buf,gendname)
                    buf.insert_at_cursor(": "+msg)
                else:
                    buf.insert_at_cursor(": ")
                    # these guys have names and games in the content
                    self.print_with_colors(buf,msg)

                self.tvs[tab].scroll_to_mark(buf.get_insert(), 0)
                if self.pmn == "ON" and arrow == "<-":
                    gtk.gdk.beep() 

            return True 

        else:
            return False

    def monitor(self):
        '''Starts the subprocess that watches the log file and sends data
        to update when appropriate'''
        cmd = "tail -f "+self.lf
        # watch the logfile and add handler
        self.proc = subprocess.Popen(cmd, shell=True,
                                     stdout=subprocess.PIPE,
                                     preexec_fn=os.setsid)
        gobject.io_add_watch(self.proc.stdout, gobject.IO_IN, self.update)


    def __init__(self, logfile):
        # make logfile available
        self.lf = logfile
        self.pmn = None

        # find the player's name, don't need this currently
        #lflines = open(logfile).readlines()
        #for l in lflines:
        #  m = re.match("Player Identification: (\S+)", l)
        #  if m:
        #    self.playername=m.group(1)

        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_default_size(480,640)

        
        # window title
        self.window.set_title("Dragon's Tale Monitor")        

        # connect window manager event to signal handlers
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)

        # set window border width
        self.window.set_border_width(0)

        box = gtk.VBox(False, 0) 
        self.window.add(box)

        self.notebook = gtk.Notebook()
        self.notebook.set_tab_pos(gtk.POS_TOP)
        box.pack_start(self.notebook)
        self.show_tabs = True 
        self.show_border = True

        # create tabs for "chat, pms"
        tab_names = ["Chat","PMs","Messages","Jackpots" ]
        self.tabs = {} 
        self.tvs  = {}
        for k in tab_names:
            bufferl = k 

            # scrolling area
            self.tabs[k] = gtk.ScrolledWindow()
            self.tabs[k].set_border_width(10)
            self.tabs[k].set_policy(gtk.POLICY_AUTOMATIC,
                                         gtk.POLICY_AUTOMATIC)
            self.tabs[k].show()

            label = gtk.Label(bufferl)
            self.notebook.append_page(self.tabs[k], label)

            # create a text view to hold the info 
            self.tvs[k] = gtk.TextView(buffer=None)
            self.tvs[k].set_editable(False)
            self.tvs[k].set_cursor_visible(False)
            self.tvs[k].set_wrap_mode(gtk.WRAP_WORD)
            self.tvs[k].set_justification(gtk.JUSTIFY_LEFT)
            self.tvs[k].show()

            # create some color tags
            tb = self.tvs[k].get_buffer()
            tag = tb.create_tag("red_fg", foreground="red")
            tag = tb.create_tag("blue_fg", foreground="blue")
            tag = tb.create_tag("green_fg", foreground="#008000")
            tag = tb.create_tag("small", scale=pango.SCALE_X_SMALL)

            self.tabs[k].add(self.tvs[k])


        # create a config option or two
        pmn_button = gtk.CheckButton('PM Notify')
        pmn_button.connect("toggled", self.set_pmn)
        pmn_button.show()
        box.pack_start(pmn_button,expand=False,padding=10)

        # display everything 
        #self.tv.show()
        #self.sw.show()
        box.show()
        self.notebook.show()
        self.window.show()



    def main(self):
        # all PyGTK applications require a gtk.main()
        self.monitor()
        gtk.main()


## If run directly...
if __name__ == "__main__":
    if len(sys.argv)!=2:
        print "Please provide the location of egenesis.bug as an argument." 
        print "For example" 
        print "  $ print_chat.py ~/eClient/egenesis.bug" 
        sys.exit(1)

    dtm = DragonsTaleMonitor(sys.argv[1])
    dtm.main()
